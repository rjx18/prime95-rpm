#!/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Apr  7 07:11:46 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
set MIN_FFT_SIZE [lindex $argv 0]
set MAX_FFT_SIZE [lindex $argv 1]
set NUM_CPU_CORES [lindex $argv 2]
spawn ./mprime
match_max 100000
expect -exact "	     Main Menu\r
\r
	 1.  Test/Primenet\r
	 2.  Test/Worker threads\r
	 3.  Test/Status\r
	 4.  Test/Continue\r
	 5.  Test/Exit\r
	 6.  Advanced/Test\r
	 7.  Advanced/Time\r
	 8.  Advanced/P-1\r
	 9.  Advanced/ECM\r
	10.  Advanced/Manual Communication\r
	11.  Advanced/Unreserve Exponent\r
	12.  Advanced/Quit Gimps\r
	13.  Options/CPU\r
	14.  Options/Resource Limits\r
	15.  Options/Preferences\r
	16.  Options/Torture Test\r
	17.  Options/Benchmark\r
	18.  Help/About\r
	19.  Help/About PrimeNet Server\r
Your choice: "
send -- "17\r"
expect -exact "17\r
\r
Benchmark type (0 = Throughput, 1 = FFT timings, 2 = Trial factoring) (0): "
send -- "1\r"
expect -exact "1\r
\r
FFTs to benchmark\r
Minimum FFT size (in K) (2048): "
send -- "$MIN_FFT_SIZE\r"
expect "Maximum FFT size (in K) (8192): "
send -- "$MAX_FFT_SIZE\r"
expect "Benchmark with round-off checking enabled (N): "
send -- "N\r"
expect -exact "N\r
Benchmark all-complex FFTs (for LLR,PFGW,PRP users) (N): "
send -- "N\r"
expect -exact "N\r
Limit FFT sizes (mimic older benchmarking code) (N): "
send -- "N\r"
expect "): "
send -- "$NUM_CPU_CORES\r"
expect "Accept the answers above? (Y): "
send -- "Y\r"
expect "Worker stopped.\r
"
send -- "5\r"
expect eof
